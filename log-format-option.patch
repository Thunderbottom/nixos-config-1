From fe10125cf962aaeae92fa8f3c361a580e25be35d Mon Sep 17 00:00:00 2001
From: Tony Olagbaiye <me@fron.io>
Date: Wed, 26 Aug 2020 04:53:33 +0100
Subject: [PATCH 1/4] Add a settings option for log-format

Co-authored-by: Cole Helbling <cole.e.helbling@outlook.com>
---
 src/libmain/common-args.cc |  8 -------
 src/libmain/loggers.cc     | 25 +++-----------------
 src/libmain/loggers.hh     |  9 --------
 src/libstore/globals.cc    | 47 ++++++++++++++++++++++++++++++++++++++
 src/libstore/globals.hh    |  3 +++
 src/libstore/local.mk      |  4 +++-
 src/libutil/types.hh       |  8 +++++++
 src/nix/main.cc            |  2 +-
 8 files changed, 65 insertions(+), 41 deletions(-)

diff --git a/src/libmain/common-args.cc b/src/libmain/common-args.cc
index 3411e2d7a..95b1fdb01 100644
--- a/src/libmain/common-args.cc
+++ b/src/libmain/common-args.cc
@@ -49,14 +49,6 @@ MixCommonArgs::MixCommonArgs(const string & programName)
         }
     });
 
-    addFlag({
-        .longName = "log-format",
-        .description = "format of log output; `raw`, `internal-json`, `bar` "
-                        "or `bar-with-logs`",
-        .labels = {"format"},
-        .handler = {[](std::string format) { setLogFormat(format); }},
-    });
-
     addFlag({
         .longName = "max-jobs",
         .shortName = 'j',
diff --git a/src/libmain/loggers.cc b/src/libmain/loggers.cc
index 0a7291780..61f71f627 100644
--- a/src/libmain/loggers.cc
+++ b/src/libmain/loggers.cc
@@ -1,27 +1,12 @@
 #include "loggers.hh"
 #include "progress-bar.hh"
 #include "util.hh"
+#include "globals.hh"
 
 namespace nix {
 
-LogFormat defaultLogFormat = LogFormat::raw;
-
-LogFormat parseLogFormat(const std::string & logFormatStr) {
-    if (logFormatStr == "raw" || getEnv("NIX_GET_COMPLETIONS"))
-        return LogFormat::raw;
-    else if (logFormatStr == "raw-with-logs")
-        return LogFormat::rawWithLogs;
-    else if (logFormatStr == "internal-json")
-        return LogFormat::internalJson;
-    else if (logFormatStr == "bar")
-        return LogFormat::bar;
-    else if (logFormatStr == "bar-with-logs")
-        return LogFormat::barWithLogs;
-    throw Error("option 'log-format' has an invalid value '%s'", logFormatStr);
-}
-
 Logger * makeDefaultLogger() {
-    switch (defaultLogFormat) {
+    switch (settings.logFormat) {
     case LogFormat::raw:
         return makeSimpleLogger(false);
     case LogFormat::rawWithLogs:
@@ -37,12 +22,8 @@ Logger * makeDefaultLogger() {
     }
 }
 
-void setLogFormat(const std::string & logFormatStr) {
-    setLogFormat(parseLogFormat(logFormatStr));
-}
-
 void setLogFormat(const LogFormat & logFormat) {
-    defaultLogFormat = logFormat;
+    settings.logFormat = logFormat;
     createDefaultLogger();
 }
 
diff --git a/src/libmain/loggers.hh b/src/libmain/loggers.hh
index cada03110..405c2321d 100644
--- a/src/libmain/loggers.hh
+++ b/src/libmain/loggers.hh
@@ -4,15 +4,6 @@
 
 namespace nix {
 
-enum class LogFormat {
-  raw,
-  rawWithLogs,
-  internalJson,
-  bar,
-  barWithLogs,
-};
-
-void setLogFormat(const std::string & logFormatStr);
 void setLogFormat(const LogFormat & logFormat);
 
 void createDefaultLogger();
diff --git a/src/libstore/globals.cc b/src/libstore/globals.cc
index 1238dc530..dee9ca3d0 100644
--- a/src/libstore/globals.cc
+++ b/src/libstore/globals.cc
@@ -3,6 +3,7 @@
 #include "archive.hh"
 #include "args.hh"
 #include "abstract-setting-to-json.hh"
+#include "loggers.hh"
 
 #include <algorithm>
 #include <map>
@@ -192,6 +193,52 @@ template<> void BaseSetting<SandboxMode>::convertToArg(Args & args, const std::s
     });
 }
 
+template<> void BaseSetting<LogFormat>::set(const std::string & str)
+{
+    if (str == "raw")
+        value = LogFormat::raw;
+    else if (str == "raw-with-logs")
+        value = LogFormat::rawWithLogs;
+    else if (str == "internal-json")
+        value = LogFormat::internalJson;
+    else if (str == "bar")
+        value = LogFormat::bar;
+    else if (str == "bar-with-logs")
+        value = LogFormat::barWithLogs;
+    else throw UsageError("option '%s' has an invalid value '%s'", name, str);
+
+    createDefaultLogger();
+}
+
+template<> std::string BaseSetting<LogFormat>::to_string() const
+{
+    if (value == LogFormat::raw) return "raw";
+    else if (value == LogFormat::rawWithLogs) return "raw-with-logs";
+    else if (value == LogFormat::internalJson) return "internal-json";
+    else if (value == LogFormat::bar) return "bar";
+    else if (value == LogFormat::barWithLogs) return "bar-with-logs";
+    else abort();
+}
+
+template<> nlohmann::json BaseSetting<LogFormat>::toJSON()
+{
+    return AbstractSetting::toJSON();
+}
+
+template<> void BaseSetting<LogFormat>::convertToArg(Args & args, const std::string & category)
+{
+    args.addFlag({
+        .longName = name,
+        .description = "format of log output; `raw`, `raw-with-logs`, `internal-json`, `bar`, "
+                        "or `bar-with-logs`",
+        .category = category,
+        .labels = {"format"},
+        .handler = {[&](std::string format) {
+            settings.logFormat.set(format);
+        }}
+    });
+}
+
 void MaxBuildJobsSetting::set(const std::string & str)
 {
     if (str == "auto") value = std::max(1U, std::thread::hardware_concurrency());
diff --git a/src/libstore/globals.hh b/src/libstore/globals.hh
index 8c63c5b34..c9b969537 100644
--- a/src/libstore/globals.hh
+++ b/src/libstore/globals.hh
@@ -911,6 +911,9 @@ public:
     Setting<Strings> experimentalFeatures{this, {}, "experimental-features",
         "Experimental Nix features to enable."};
 
+    Setting<LogFormat> logFormat{this, LogFormat::bar, "log-format",
+        "Default build output logging format; \"raw\", \"raw-with-logs\", \"internal-json\", \"bar\" or \"bar-with-logs\"."};
+
     bool isExperimentalFeatureEnabled(const std::string & name);
 
     void requireExperimentalFeature(const std::string & name);
diff --git a/src/libstore/local.mk b/src/libstore/local.mk
index d266c8efe..6d5495f99 100644
--- a/src/libstore/local.mk
+++ b/src/libstore/local.mk
@@ -8,6 +8,8 @@ libstore_SOURCES := $(wildcard $(d)/*.cc $(d)/builtins/*.cc)
 
 libstore_LIBS = libutil
 
+libstore_ALLOW_UNDEFINED = 1
+
 libstore_LDFLAGS = $(SQLITE3_LIBS) -lbz2 $(LIBCURL_LIBS) $(SODIUM_LIBS) -pthread
 ifneq ($(OS), FreeBSD)
  libstore_LDFLAGS += -ldl
@@ -32,7 +34,7 @@ ifeq ($(HAVE_SECCOMP), 1)
 endif
 
 libstore_CXXFLAGS += \
- -I src/libutil -I src/libstore \
+ -I src/libmain -I src/libutil -I src/libstore \
  -DNIX_PREFIX=\"$(prefix)\" \
  -DNIX_STORE_DIR=\"$(storedir)\" \
  -DNIX_DATA_DIR=\"$(datadir)\" \
diff --git a/src/libutil/types.hh b/src/libutil/types.hh
index 55d02bcf9..e4c802210 100644
--- a/src/libutil/types.hh
+++ b/src/libutil/types.hh
@@ -18,6 +18,14 @@ typedef list<string> Strings;
 typedef set<string> StringSet;
 typedef std::map<string, string> StringMap;
 
+enum class LogFormat {
+  raw,
+  rawWithLogs,
+  internalJson,
+  bar,
+  barWithLogs,
+};
+
 /* Paths are just strings. */
 
 typedef string Path;
diff --git a/src/nix/main.cc b/src/nix/main.cc
index 1e9e07bc0..2c3d83df5 100644
--- a/src/nix/main.cc
+++ b/src/nix/main.cc
@@ -173,7 +173,7 @@ void mainWrapped(int argc, char * * argv)
     settings.verboseBuild = false;
     evalSettings.pureEval = true;
 
-    setLogFormat("bar");
+    createDefaultLogger();
 
     Finally f([] { logger->stop(); });
 
-- 
2.28.0


From bb1e86e36a69576f7f4213fc08f89b9ba2c35643 Mon Sep 17 00:00:00 2001
From: Cole Helbling <cole.e.helbling@outlook.com>
Date: Thu, 17 Sep 2020 17:22:32 -0700
Subject: [PATCH 2/4] Make loggers pluggable

Thanks to some precision guidance by regnat, we can remove libstore's
dependency on libmain by just making the logging mechanisms pluggable.

This:
* moves loggers.{hh,cc} from libmain to libutil
* removes the now-unnecessary (and incorrect) `toJSON` specialization
* moves LogFormat from types.hh to loggers.hh
* adds a completer (untested)

To add another logger, the following steps should be all that's
necessary:
1) Add enum variant in libutil/loggers.hh and name to the `std::set` in
loggers.cc
2) Modify the specialized `set` and `to_string` methods to include the
new variant
3) Use the `OnStartup` class to `registerLogger` the new logger method

Co-authored-by: regnat <rg@regnat.ovh>
---
 src/libmain/loggers.cc      | 34 ------------------
 src/libmain/loggers.hh      | 11 ------
 src/libmain/progress-bar.cc |  8 +++++
 src/libstore/globals.cc     | 71 +++++++++++++++++++++++++++----------
 src/libstore/globals.hh     | 16 +++++++--
 src/libstore/local.mk       |  4 +--
 src/libutil/loggers.cc      | 21 +++++++++++
 src/libutil/loggers.hh      | 26 ++++++++++++++
 src/libutil/logging.cc      | 11 ++++++
 src/libutil/types.hh        |  8 -----
 10 files changed, 132 insertions(+), 78 deletions(-)
 delete mode 100644 src/libmain/loggers.cc
 delete mode 100644 src/libmain/loggers.hh
 create mode 100644 src/libutil/loggers.cc
 create mode 100644 src/libutil/loggers.hh

diff --git a/src/libmain/loggers.cc b/src/libmain/loggers.cc
deleted file mode 100644
index 61f71f627..000000000
--- a/src/libmain/loggers.cc
+++ /dev/null
@@ -1,34 +0,0 @@
-#include "loggers.hh"
-#include "progress-bar.hh"
-#include "util.hh"
-#include "globals.hh"
-
-namespace nix {
-
-Logger * makeDefaultLogger() {
-    switch (settings.logFormat) {
-    case LogFormat::raw:
-        return makeSimpleLogger(false);
-    case LogFormat::rawWithLogs:
-        return makeSimpleLogger(true);
-    case LogFormat::internalJson:
-        return makeJSONLogger(*makeSimpleLogger(true));
-    case LogFormat::bar:
-        return makeProgressBar();
-    case LogFormat::barWithLogs:
-        return makeProgressBar(true);
-    default:
-        abort();
-    }
-}
-
-void setLogFormat(const LogFormat & logFormat) {
-    settings.logFormat = logFormat;
-    createDefaultLogger();
-}
-
-void createDefaultLogger() {
-    logger = makeDefaultLogger();
-}
-
-}
diff --git a/src/libmain/loggers.hh b/src/libmain/loggers.hh
deleted file mode 100644
index 405c2321d..000000000
--- a/src/libmain/loggers.hh
+++ /dev/null
@@ -1,11 +0,0 @@
-#pragma once
-
-#include "types.hh"
-
-namespace nix {
-
-void setLogFormat(const LogFormat & logFormat);
-
-void createDefaultLogger();
-
-}
diff --git a/src/libmain/progress-bar.cc b/src/libmain/progress-bar.cc
index 07b45b3b5..1d818f069 100644
--- a/src/libmain/progress-bar.cc
+++ b/src/libmain/progress-bar.cc
@@ -3,6 +3,7 @@
 #include "sync.hh"
 #include "store-api.hh"
 #include "names.hh"
+#include "loggers.hh"
 
 #include <atomic>
 #include <map>
@@ -11,6 +12,13 @@
 
 namespace nix {
 
+static auto rLoggerBar = OnStartup([] {
+    registerLogger("bar", []() -> Logger* { return makeProgressBar(false); });
+});
+static auto rLoggerBarWithLogs = OnStartup([] {
+    registerLogger("bar-with-logs", []() -> Logger* { return makeProgressBar(true); });
+});
+
 static std::string getS(const std::vector<Logger::Field> & fields, size_t n)
 {
     assert(n < fields.size());
diff --git a/src/libstore/globals.cc b/src/libstore/globals.cc
index dee9ca3d0..0939d7371 100644
--- a/src/libstore/globals.cc
+++ b/src/libstore/globals.cc
@@ -3,7 +3,6 @@
 #include "archive.hh"
 #include "args.hh"
 #include "abstract-setting-to-json.hh"
-#include "loggers.hh"
 
 #include <algorithm>
 #include <map>
@@ -193,18 +192,35 @@ template<> void BaseSetting<SandboxMode>::convertToArg(Args & args, const std::s
     });
 }
 
+static void logFormatCompleter(size_t index, std::string_view prefix)
+{
+    for (auto & builder : registeredLoggers)
+        if (hasPrefix(builder->name, prefix))
+            completions->insert(builder->name);
+}
+
+std::string listLogFormats()
+{
+    std::string res;
+
+    for (auto format = logFormats.begin(); format != logFormats.end(); ++format) {
+        if (!res.empty()) res += ", ";
+        if (std::next(format) == logFormats.end()) res += "or ";
+        res += "'";
+        res += *format;
+        res += "'";
+    }
+
+    return res;
+}
+
 template<> void BaseSetting<LogFormat>::set(const std::string & str)
 {
-    if (str == "raw")
-        value = LogFormat::raw;
-    else if (str == "raw-with-logs")
-        value = LogFormat::rawWithLogs;
-    else if (str == "internal-json")
-        value = LogFormat::internalJson;
-    else if (str == "bar")
-        value = LogFormat::bar;
-    else if (str == "bar-with-logs")
-        value = LogFormat::barWithLogs;
+    if (str == "raw") value = LogFormat::raw;
+    else if (str == "raw-with-logs") value = LogFormat::rawWithLogs;
+    else if (str == "internal-json") value = LogFormat::internalJson;
+    else if (str == "bar") value = LogFormat::bar;
+    else if (str == "bar-with-logs") value = LogFormat::barWithLogs;
     else throw UsageError("option '%s' has an invalid value '%s'", name, str);
 
     createDefaultLogger();
@@ -220,25 +236,42 @@ template<> std::string BaseSetting<LogFormat>::to_string() const
     else abort();
 }
 
-template<> nlohmann::json BaseSetting<LogFormat>::toJSON()
-{
-    return AbstractSetting::toJSON();
-}
-
 template<> void BaseSetting<LogFormat>::convertToArg(Args & args, const std::string & category)
 {
     args.addFlag({
         .longName = name,
-        .description = "format of log output; `raw`, `raw-with-logs`, `internal-json`, `bar`, "
-                        "or `bar-with-logs`",
+        .description = fmt("format of log output; %s", listLogFormats()),
         .category = category,
         .labels = {"format"},
         .handler = {[&](std::string format) {
             settings.logFormat.set(format);
-        }}
+        }},
+        .completer = logFormatCompleter
     });
 }
 
+void setLogFormat(const LogFormat & logFormat)
+{
+    settings.logFormat = logFormat;
+    createDefaultLogger();
+}
+
+Logger* makeDefaultLogger()
+{
+    for (auto & builder : registeredLoggers) {
+        if (builder->name == settings.logFormat.to_string()) {
+            return builder->builder();
+        }
+    }
+
+    throw UsageError("Unknown logger '%s'", settings.logFormat.to_string());
+}
+
+void createDefaultLogger()
+{
+    logger = makeDefaultLogger();
+}
+
 void MaxBuildJobsSetting::set(const std::string & str)
 {
     if (str == "auto") value = std::max(1U, std::thread::hardware_concurrency());
diff --git a/src/libstore/globals.hh b/src/libstore/globals.hh
index c9b969537..ae1814a44 100644
--- a/src/libstore/globals.hh
+++ b/src/libstore/globals.hh
@@ -3,6 +3,7 @@
 #include "types.hh"
 #include "config.hh"
 #include "util.hh"
+#include "loggers.hh"
 
 #include <map>
 #include <limits>
@@ -11,6 +12,8 @@
 
 namespace nix {
 
+std::string listLogFormats();
+
 typedef enum { smEnabled, smRelaxed, smDisabled } SandboxMode;
 
 struct MaxBuildJobsSetting : public BaseSetting<unsigned int>
@@ -911,9 +914,6 @@ public:
     Setting<Strings> experimentalFeatures{this, {}, "experimental-features",
         "Experimental Nix features to enable."};
 
-    Setting<LogFormat> logFormat{this, LogFormat::bar, "log-format",
-        "Default build output logging format; \"raw\", \"raw-with-logs\", \"internal-json\", \"bar\" or \"bar-with-logs\"."};
-
     bool isExperimentalFeatureEnabled(const std::string & name);
 
     void requireExperimentalFeature(const std::string & name);
@@ -942,8 +942,18 @@ public:
           resolves to a different location from that of the build machine. You
           can enable this setting if you are sure you're not going to do that.
         )"};
+
+    // FIXME: default shows as "3", but should show as "bar", due to the default
+    // being an enum variant
+    Setting<LogFormat> logFormat{this, LogFormat::bar, "log-format",
+        fmt("Default build output logging format. Valid options are: %s.", listLogFormats())};
+
+    Logger* makeDefaultLogger();
 };
 
+void setLogFormat(const LogFormat & logFormat);
+
+void createDefaultLogger();
 
 // FIXME: don't use a global variable.
 extern Settings settings;
diff --git a/src/libstore/local.mk b/src/libstore/local.mk
index 6d5495f99..d266c8efe 100644
--- a/src/libstore/local.mk
+++ b/src/libstore/local.mk
@@ -8,8 +8,6 @@ libstore_SOURCES := $(wildcard $(d)/*.cc $(d)/builtins/*.cc)
 
 libstore_LIBS = libutil
 
-libstore_ALLOW_UNDEFINED = 1
-
 libstore_LDFLAGS = $(SQLITE3_LIBS) -lbz2 $(LIBCURL_LIBS) $(SODIUM_LIBS) -pthread
 ifneq ($(OS), FreeBSD)
  libstore_LDFLAGS += -ldl
@@ -34,7 +32,7 @@ ifeq ($(HAVE_SECCOMP), 1)
 endif
 
 libstore_CXXFLAGS += \
- -I src/libmain -I src/libutil -I src/libstore \
+ -I src/libutil -I src/libstore \
  -DNIX_PREFIX=\"$(prefix)\" \
  -DNIX_STORE_DIR=\"$(storedir)\" \
  -DNIX_DATA_DIR=\"$(datadir)\" \
diff --git a/src/libutil/loggers.cc b/src/libutil/loggers.cc
new file mode 100644
index 000000000..34bc03418
--- /dev/null
+++ b/src/libutil/loggers.cc
@@ -0,0 +1,21 @@
+#include "loggers.hh"
+
+namespace nix {
+
+std::set<std::string> logFormats = {
+    "raw",
+    "raw-with-logs",
+    "internal-json",
+    "bar",
+    "bar-with-logs"
+};
+
+std::vector<std::shared_ptr<LoggerBuilder>> registeredLoggers;
+
+void registerLogger(std::string name, std::function<Logger *()> builder)
+{
+    LoggerBuilder lBuilder { .name = name, .builder = builder };
+    registeredLoggers.push_back(std::make_shared<LoggerBuilder>(lBuilder));
+}
+
+}
diff --git a/src/libutil/loggers.hh b/src/libutil/loggers.hh
new file mode 100644
index 000000000..6b89f9037
--- /dev/null
+++ b/src/libutil/loggers.hh
@@ -0,0 +1,26 @@
+#pragma once
+
+#include "logging.hh"
+
+namespace nix {
+
+enum struct LogFormat {
+    raw,
+    rawWithLogs,
+    internalJson,
+    bar,
+    barWithLogs,
+};
+
+struct LoggerBuilder {
+    std::string name;
+    std::function<Logger *()> builder;
+};
+
+extern std::set<std::string> logFormats;
+
+extern std::vector<std::shared_ptr<LoggerBuilder>> registeredLoggers;
+
+void registerLogger(std::string name, std::function<Logger *()> builder);
+
+}
diff --git a/src/libutil/logging.cc b/src/libutil/logging.cc
index 8a6752e22..49a0c1893 100644
--- a/src/libutil/logging.cc
+++ b/src/libutil/logging.cc
@@ -1,6 +1,7 @@
 #include "logging.hh"
 #include "util.hh"
 #include "config.hh"
+#include "loggers.hh"
 
 #include <atomic>
 #include <nlohmann/json.hpp>
@@ -12,6 +13,16 @@ LoggerSettings loggerSettings;
 
 static GlobalConfig::Register rLoggerSettings(&loggerSettings);
 
+static auto rLoggerJSON = OnStartup([] {
+    registerLogger("internal-json", []() -> Logger* { return makeJSONLogger(*makeSimpleLogger(true)); });
+});
+static auto rLoggerRaw = OnStartup([] {
+    registerLogger("raw", []() -> Logger* { return makeSimpleLogger(false); });
+});
+static auto rLoggerRawWithLogs = OnStartup([] {
+    registerLogger("raw-with-logs", []() -> Logger* { return makeSimpleLogger(true); });
+});
+
 static thread_local ActivityId curActivity = 0;
 
 ActivityId getCurActivity()
diff --git a/src/libutil/types.hh b/src/libutil/types.hh
index e4c802210..55d02bcf9 100644
--- a/src/libutil/types.hh
+++ b/src/libutil/types.hh
@@ -18,14 +18,6 @@ typedef list<string> Strings;
 typedef set<string> StringSet;
 typedef std::map<string, string> StringMap;
 
-enum class LogFormat {
-  raw,
-  rawWithLogs,
-  internalJson,
-  bar,
-  barWithLogs,
-};
-
 /* Paths are just strings. */
 
 typedef string Path;
-- 
2.28.0


From 0e3bd416c16dffa00eb482a5d8ebf0691d3e01ec Mon Sep 17 00:00:00 2001
From: Cole Helbling <cole.e.helbling@outlook.com>
Date: Sat, 19 Sep 2020 00:58:16 -0700
Subject: [PATCH 3/4] Make loggers more pluggable

It is no longer necessary to add the logger name to the `logFormats` set
when adding a new logger (due to its removal).

Additionally, the manpage now displays the string "bar" as the default,
rather than an unhelpfully opaque integer.

Co-authored-by: regnat <rg@regnat.ovh>
Co-authored-by: Daiderd Jordan <daiderd@gmail.com>
---
 src/libstore/globals.cc | 36 ++++++++++++++++++++++++------------
 src/libstore/globals.hh | 18 ++++++++++++------
 src/libutil/loggers.cc  | 34 +++++++++++++++++++++++++---------
 src/libutil/loggers.hh  |  6 ++----
 4 files changed, 63 insertions(+), 31 deletions(-)

diff --git a/src/libstore/globals.cc b/src/libstore/globals.cc
index 0939d7371..5e3c50510 100644
--- a/src/libstore/globals.cc
+++ b/src/libstore/globals.cc
@@ -192,28 +192,33 @@ template<> void BaseSetting<SandboxMode>::convertToArg(Args & args, const std::s
     });
 }
 
-static void logFormatCompleter(size_t index, std::string_view prefix)
-{
-    for (auto & builder : registeredLoggers)
-        if (hasPrefix(builder->name, prefix))
-            completions->insert(builder->name);
-}
-
 std::string listLogFormats()
 {
     std::string res;
 
-    for (auto format = logFormats.begin(); format != logFormats.end(); ++format) {
+    auto loggers = getRegisteredLoggers();
+
+    for (auto format = loggers.begin(); format != loggers.end(); ++format) {
         if (!res.empty()) res += ", ";
-        if (std::next(format) == logFormats.end()) res += "or ";
+        if (std::next(format) == loggers.end()) res += "or ";
         res += "'";
-        res += *format;
+        res += (*format)->name;
         res += "'";
     }
 
     return res;
 }
 
+LogFormatSetting::LogFormatSetting(Config * options,
+        LogFormat def,
+        const std::string & name,
+        const std::string & description,
+        const std::set<std::string> & aliases)
+    : BaseSetting<LogFormat>(def, name, fmt("%s Valid options are: %s.", description, listLogFormats()), aliases)
+{
+    options->addSetting(this);
+}
+
 template<> void BaseSetting<LogFormat>::set(const std::string & str)
 {
     if (str == "raw") value = LogFormat::raw;
@@ -236,6 +241,13 @@ template<> std::string BaseSetting<LogFormat>::to_string() const
     else abort();
 }
 
+static void logFormatCompleter(size_t index, std::string_view prefix)
+{
+    for (auto & builder : getRegisteredLoggers())
+        if (hasPrefix(builder->name, prefix))
+            completions->insert(builder->name);
+}
+
 template<> void BaseSetting<LogFormat>::convertToArg(Args & args, const std::string & category)
 {
     args.addFlag({
@@ -252,13 +264,13 @@ template<> void BaseSetting<LogFormat>::convertToArg(Args & args, const std::str
 
 void setLogFormat(const LogFormat & logFormat)
 {
-    settings.logFormat = logFormat;
+    settings.logFormat.assign(logFormat);
     createDefaultLogger();
 }
 
 Logger* makeDefaultLogger()
 {
-    for (auto & builder : registeredLoggers) {
+    for (auto & builder : getRegisteredLoggers()) {
         if (builder->name == settings.logFormat.to_string()) {
             return builder->builder();
         }
diff --git a/src/libstore/globals.hh b/src/libstore/globals.hh
index ae1814a44..6a28e5230 100644
--- a/src/libstore/globals.hh
+++ b/src/libstore/globals.hh
@@ -12,10 +12,17 @@
 
 namespace nix {
 
-std::string listLogFormats();
-
 typedef enum { smEnabled, smRelaxed, smDisabled } SandboxMode;
 
+struct LogFormatSetting : public BaseSetting<LogFormat>
+{
+    LogFormatSetting(Config * options,
+        LogFormat def,
+        const std::string & name,
+        const std::string & description,
+        const std::set<std::string> & aliases = {});
+};
+
 struct MaxBuildJobsSetting : public BaseSetting<unsigned int>
 {
     MaxBuildJobsSetting(Config * options,
@@ -943,10 +950,9 @@ public:
           can enable this setting if you are sure you're not going to do that.
         )"};
 
-    // FIXME: default shows as "3", but should show as "bar", due to the default
-    // being an enum variant
-    Setting<LogFormat> logFormat{this, LogFormat::bar, "log-format",
-        fmt("Default build output logging format. Valid options are: %s.", listLogFormats())};
+    // FIXME: generated manpage is missing "bar" and "bar-with-logs" because
+    // they're registered outside libutil
+    LogFormatSetting logFormat{this, LogFormat::bar, "log-format", "Default logging format for build output."};
 
     Logger* makeDefaultLogger();
 };
diff --git a/src/libutil/loggers.cc b/src/libutil/loggers.cc
index 34bc03418..e068984a6 100644
--- a/src/libutil/loggers.cc
+++ b/src/libutil/loggers.cc
@@ -1,21 +1,37 @@
 #include "loggers.hh"
 
+#include <nlohmann/json.hpp>
+
 namespace nix {
 
-std::set<std::string> logFormats = {
-    "raw",
-    "raw-with-logs",
-    "internal-json",
-    "bar",
-    "bar-with-logs"
-};
+// This is necessary in order to show the log format's name, rather than an
+// integer, in JSON output.
+NLOHMANN_JSON_SERIALIZE_ENUM(LogFormat, {
+    {LogFormat::raw, "raw"},
+    {LogFormat::rawWithLogs, "raw-with-logs"},
+    {LogFormat::internalJson, "internal-json"},
+    {LogFormat::bar, "bar"},
+    {LogFormat::barWithLogs, "bar-with-logs"},
+});
+
+static std::vector<std::shared_ptr<LoggerBuilder>>* registeredLoggers;
 
-std::vector<std::shared_ptr<LoggerBuilder>> registeredLoggers;
+void initRegisteredLoggers()
+{
+    if (!registeredLoggers)
+        registeredLoggers = new std::vector<std::shared_ptr<LoggerBuilder>>();
+}
 
 void registerLogger(std::string name, std::function<Logger *()> builder)
 {
     LoggerBuilder lBuilder { .name = name, .builder = builder };
-    registeredLoggers.push_back(std::make_shared<LoggerBuilder>(lBuilder));
+    initRegisteredLoggers();
+    registeredLoggers->push_back(std::make_shared<LoggerBuilder>(lBuilder));
+}
+
+std::vector<std::shared_ptr<LoggerBuilder>> getRegisteredLoggers()
+{
+    return *registeredLoggers;
 }
 
 }
diff --git a/src/libutil/loggers.hh b/src/libutil/loggers.hh
index 6b89f9037..a7539603e 100644
--- a/src/libutil/loggers.hh
+++ b/src/libutil/loggers.hh
@@ -17,10 +17,8 @@ struct LoggerBuilder {
     std::function<Logger *()> builder;
 };
 
-extern std::set<std::string> logFormats;
-
-extern std::vector<std::shared_ptr<LoggerBuilder>> registeredLoggers;
-
 void registerLogger(std::string name, std::function<Logger *()> builder);
 
+std::vector<std::shared_ptr<LoggerBuilder>> getRegisteredLoggers();
+
 }
-- 
2.28.0


From 746b4bded8c24db5b36c0dba95f2d45882cd2949 Mon Sep 17 00:00:00 2001
From: Cole Helbling <cole.e.helbling@outlook.com>
Date: Sat, 19 Sep 2020 01:03:02 -0700
Subject: [PATCH 4/4] Move progress-bar to libutil

This fixes manpage generation excluding the `bar` and `bar-with-logs`
log formats that were registered outside libutil; now all formats
appear.

Note that any loggers registered outside of libutil might not appear in
the manpage -- probably due to the fact that C++ doesn't define the
order in which static variables are initialized (as regnat noted).

This also removes the unused store-api.hh include in progress-bar.cc.
---
 src/libstore/globals.hh                  | 2 --
 src/{libstore => libutil}/names.cc       | 0
 src/{libstore => libutil}/names.hh       | 0
 src/{libmain => libutil}/progress-bar.cc | 1 -
 src/{libmain => libutil}/progress-bar.hh | 0
 5 files changed, 3 deletions(-)
 rename src/{libstore => libutil}/names.cc (100%)
 rename src/{libstore => libutil}/names.hh (100%)
 rename src/{libmain => libutil}/progress-bar.cc (99%)
 rename src/{libmain => libutil}/progress-bar.hh (100%)

diff --git a/src/libstore/globals.hh b/src/libstore/globals.hh
index 6a28e5230..59adb2998 100644
--- a/src/libstore/globals.hh
+++ b/src/libstore/globals.hh
@@ -950,8 +950,6 @@ public:
           can enable this setting if you are sure you're not going to do that.
         )"};
 
-    // FIXME: generated manpage is missing "bar" and "bar-with-logs" because
-    // they're registered outside libutil
     LogFormatSetting logFormat{this, LogFormat::bar, "log-format", "Default logging format for build output."};
 
     Logger* makeDefaultLogger();
diff --git a/src/libstore/names.cc b/src/libutil/names.cc
similarity index 100%
rename from src/libstore/names.cc
rename to src/libutil/names.cc
diff --git a/src/libstore/names.hh b/src/libutil/names.hh
similarity index 100%
rename from src/libstore/names.hh
rename to src/libutil/names.hh
diff --git a/src/libmain/progress-bar.cc b/src/libutil/progress-bar.cc
similarity index 99%
rename from src/libmain/progress-bar.cc
rename to src/libutil/progress-bar.cc
index 1d818f069..e4dba430f 100644
--- a/src/libmain/progress-bar.cc
+++ b/src/libutil/progress-bar.cc
@@ -1,7 +1,6 @@
 #include "progress-bar.hh"
 #include "util.hh"
 #include "sync.hh"
-#include "store-api.hh"
 #include "names.hh"
 #include "loggers.hh"
 
diff --git a/src/libmain/progress-bar.hh b/src/libutil/progress-bar.hh
similarity index 100%
rename from src/libmain/progress-bar.hh
rename to src/libutil/progress-bar.hh
-- 
2.28.0

